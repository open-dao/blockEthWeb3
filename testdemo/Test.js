/**
 * Created by nxycd on 2018/10/31.
 */
const Web3 = require('web3');
const BigNumber = require('bignumber.js');
// const web3 = new Web3();//使用web3来进行区块链接口的调用
// web3.setProvider(new Web3.providers.HttpProvider('http://192.168.10.112:61910'));
const web3 = new Web3(new Web3.providers.HttpProvider('http://192.168.200.137:8486'));
console.log('Initialization web3 complete,the first account is ');

web3.eth.getAccounts(function(error, result) {
  console.log(error);
  console.log(result);
});
// 创建了一个account;
const a = web3.eth.accounts.create();
console.log(a, a.privateKey.toString());
// console.log(web3.eth.accounts.create(),'99999999999999XXXXXXX'); //  0x2D25495c1FeAC644830d2F66777f15E978154E1E  0x19ef687851b95bfc06df3ebda6c87a65eb76e670dfea3022c506cc68f4eb6d8e
// console.log(web3.eth.accounts.create(),'99999999999999XXXXXXX'); //  0x6a171bd34B36e058e33fEbd1Cf90A88ce330F70D  0x818524fb9d748fc49be4b14117adb1291120495533f36581df5ed186f2215ad0
console.log('==========================22222222222');
// 通过私钥创建一个账户
// var aax = web3.eth.accounts.privateKeyToAccount('0x818524fb9d748fc49be4b14117adb1291120495533f36581df5ed186f2215ad0');
// console.log(aax,'000000000000000000000')
// console.log("==========================")
// web3.eth.getBlock(48, function(error, result) {
//  if (!error) { console.log(result); } else { console.error(error); }
// });

const Tx = require('ethereumjs-tx');
const privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex');

const rawTx = {
  nonce: '0x00',
  gasPrice: '0x1',
  gasLimit: '0x2710',
  to: '0x2994d4112C1859eeefF606454b9D9b5C68B90B55',
  value: '0x00',
  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',
};

const tx = new Tx(rawTx);
tx.sign(privateKey);

const serializedTx = tx.serialize();

// console.log(serializedTx.toString('hex'));
// 0xf889808609184e72a00082271094000000000000000000000000000000000000000080a47f74657374320000000000000000000000000000000000000000000000000000006000571ca08a8bbf888cfa37bbf0bb965423625641fc956967b81d12e23709cead01446075a01ce999b56a8a88504be365442ea61239198e23d1fce7d00fcfc5cd3b44b7215f

web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
  .on('receipt', console.log);


web3.eth.signTransaction({
  from: '0x6a171bd34B36e058e33fEbd1Cf90A88ce330F70D',
  gasPrice: '2000',
  gas: '210',
  to: '0x2994d4112C1859eeefF606454b9D9b5C68B90B55',
  value: '1000000000000000000',
  nonce: '0x01',
  data: '',
}).then(console.log);


web3.eth.signTransaction({
  to: '0x6a171bd34B36e058e33fEbd1Cf90A88ce330F70D',
  gasPrice: '2000',
  gas: '210',
  from: '0x2994d4112C1859eeefF606454b9D9b5C68B90B55',
  value: '1000000000000000000',
  nonce: '0x01',
  data: '',
});

web3.eth.sendTransaction({
  to: '0x6a171bd34B36e058e33fEbd1Cf90A88ce330F70D',
  from: '0x2994d4112C1859eeefF606454b9D9b5C68B90B55',
  value: '1000000000000000',
}).then(res => {
  console.log(res, 'xxxxxxxxxxxxxxxxxxxxxxxxx');
});


// console.log('xxxxxx');
// const abi = [{ constant: true, inputs: [], name: 'name', outputs: [{ name: '', type: 'string', value: 'test1' }], payable: false, stateMutability: 'view', type: 'function', signature: '0x06fdde03' }, { constant: false, inputs: [{ name: '_spender', type: 'address' }, { name: '_value', type: 'uint256' }], name: 'approve', outputs: [{ name: 'success', type: 'bool' }], payable: false, stateMutability: 'nonpayable', type: 'function', signature: '0x095ea7b3' }, { constant: true, inputs: [], name: 'totalSupply', outputs: [{ name: '', type: 'uint256', value: '999999000000000000000000' }], payable: false, stateMutability: 'view', type: 'function', signature: '0x18160ddd' }, { constant: false, inputs: [{ name: '_from', type: 'address' }, { name: '_to', type: 'address' }, { name: '_value', type: 'uint256' }], name: 'transferFrom', outputs: [{ name: 'success', type: 'bool' }], payable: false, stateMutability: 'nonpayable', type: 'function', signature: '0x23b872dd' }, { constant: true, inputs: [], name: 'decimals', outputs: [{ name: '', type: 'uint8', value: '18' }], payable: false, stateMutability: 'view', type: 'function', signature: '0x313ce567' }, { constant: false, inputs: [{ name: '_value', type: 'uint256' }], name: 'burn', outputs: [{ name: 'success', type: 'bool' }], payable: false, stateMutability: 'nonpayable', type: 'function', signature: '0x42966c68' }, { constant: true, inputs: [], name: 'standard', outputs: [{ name: '', type: 'string', value: 'https://mshk.top' }], payable: false, stateMutability: 'view', type: 'function', signature: '0x5a3b7e42' }, { constant: true, inputs: [{ name: '', type: 'address' }], name: 'balanceOf', outputs: [{ name: '', type: 'uint256' }], payable: false, stateMutability: 'view', type: 'function', signature: '0x70a08231' }, { constant: false, inputs: [{ name: '_from', type: 'address' }, { name: '_value', type: 'uint256' }], name: 'burnFrom', outputs: [{ name: 'success', type: 'bool' }], payable: false, stateMutability: 'nonpayable', type: 'function', signature: '0x79cc6790' }, { constant: true, inputs: [], name: 'symbol', outputs: [{ name: '', type: 'string', value: 'TST1' }], payable: false, stateMutability: 'view', type: 'function', signature: '0x95d89b41' }, { constant: false, inputs: [{ name: '_to', type: 'address' }, { name: '_value', type: 'uint256' }], name: 'transfer', outputs: [], payable: false, stateMutability: 'nonpayable', type: 'function', signature: '0xa9059cbb' }, { constant: false, inputs: [{ name: '_spender', type: 'address' }, { name: '_value', type: 'uint256' }, { name: '_extraData', type: 'bytes' }], name: 'approveAndCall', outputs: [{ name: 'success', type: 'bool' }], payable: false, stateMutability: 'nonpayable', type: 'function', signature: '0xcae9ca51' }, { constant: true, inputs: [{ name: '', type: 'address' }, { name: '', type: 'address' }], name: 'allowance', outputs: [{ name: '', type: 'uint256' }], payable: false, stateMutability: 'view', type: 'function', signature: '0xdd62ed3e' }, { inputs: [{ name: 'initialSupply', type: 'uint256', index: 0, typeShort: 'uint', bits: '256', displayName: 'initial Supply', template: 'elements_input_uint', value: '999999' }, { name: 'tokenName', type: 'string', index: 1, typeShort: 'string', bits: '', displayName: 'token Name', template: 'elements_input_string', value: 'test1' }, { name: 'tokenSymbol', type: 'string', index: 2, typeShort: 'string', bits: '', displayName: 'token Symbol', template: 'elements_input_string', value: 'TST1' }], payable: false, stateMutability: 'nonpayable', type: 'constructor', signature: 'constructor' }, { anonymous: false, inputs: [{ indexed: true, name: 'from', type: 'address' }, { indexed: true, name: 'to', type: 'address' }, { indexed: false, name: 'value', type: 'uint256' }], name: 'Transfer', type: 'event', signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' }, { anonymous: false, inputs: [{ indexed: true, name: 'from', type: 'address' }, { indexed: false, name: 'value', type: 'uint256' }], name: 'Burn', type: 'event', signature: '0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5' }];
//
// const address = '0x808a5E5Bf0910343a5a2aea290c664A188E8889C';

// const metacoin = new web3.eth.Contract(abi, address);
/*
metacoin.methods.balanceOf('0x5b202acca5978b8cdb5020ea9dd4200aa56265bb').call().then(v => {

  console.log(v, '9999999999999999999999');

  const ret = new BigNumber(v);

  return parseFloat(ret.dividedBy(Ether)).toFixed(2);
})
  .then(sum => {
    console.log(sum);
  });
*/
console.log(web3.utils.sha3('640111198311200633'));

const aae135Hash = web3.utils.sha3('640111198311200633').substr(2,32);
console.log(aae135Hash,'1111xxxx')
console.log('12312312313132 = ',web3.utils.sha3('12312312313132'));
let _a = web3.utils.hexToUtf8(`0x7b2264617461223a7b2268656164223a7b22726574223a2230222c2272656d6573223a22227d2c226d7367223a7b2268656164223a7b22626c6f636b48617368223a22307862656234626432366230663562366338613037656332653461666437313564303435353439303763633766353732333466373331373163636233306263333639222c22626c6f636b4e756d626572223a3236373731382c2266726f6d223a22307833366634393862304162324136456139614343623933356135353036324641374466373545613065222c22676173223a363530303030302c226761735072696365223a2238303030303030303030222c2268617368223a22307831666166336464306334616536633965336634373766656239383035303031393937313833363532616666613465383765363863633664396136653837636331222c22696e707574223ac226e6f6e6365223a3733332c22746f223a22307830396644376235394338653043654663334337653163313864414337664434324436336144303161222c227472616e73616374696f6e496e646578223a302c2276616c7565223a2230222c2276223a2230786564222c2272223a22307833643035396131383835376139643436323666653631373138643333316139373832623631373263643964636131313663666261313131353538366135623232222c2273223a22307832363935663439336534333430666531656664366637653665323764626263343962326232313831313535636331646630656533366264633639383532636466227d7d7d7d00000000000000000000`) ;
console.log('12312312313132utf8ToHex = ', _a);
console.log('22222222222222utf8ToHex = ',web3.utils.hexToUtf8('0x6630656533366264633639383532636466227d7d7d7d00000000000000000000'));

let _ascii = web3.utils.fromAscii("201605281111111111111111111111")
console.log(_ascii,'in')
_ascii = web3.utils.toAscii(_ascii);
console.log(_ascii,'out')

for (let i = 0 ;i < 5 ;i ++) {
  console.log('numberToHex i =',i , web3.utils.numberToHex(i));
}
_a = web3.utils.toAscii(`0x6074ac61ebeb53be8e6bac7377c5379f4f5333fd88da44232ba85f5a96cbbf90abef8293000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000009967b2264617461223a7b2268656164223a7b22726574223a2230222c2272656d6573223a22227d2c226d7367223a7b2268656164223a7b22626c6f636b48617368223a22307862656234626432366230663562366338613037656332653461666437313564303435353439303763633766353732333466373331373163636233306263333639222c22626c6f636b4e756d626572223a3236373731382c2266726f6d223a22307833366634393862304162324136456139614343623933356135353036324641374466373545613065222c22676173223a363530303030302c226761735072696365223a2238303030303030303030222c2268617368223a22307831666166336464306334616536633965336634373766656239383035303031393937313833363532616666613465383765363863633664396136653837636331222c22696e707574223ac226e6f6e6365223a3733332c22746f223a22307830396644376235394338653043654663334337653163313864414337664434324436336144303161222c227472616e73616374696f6e496e646578223a302c2276616c7565223a2230222c2276223a2230786564222c2272223a22307833643035396131383835376139643436323666653631373138643333316139373832623631373263643964636131313663666261313131353538366135623232222c2273223a22307832363935663439336534333430666531656664366637653665323764626263343962326232313831313535636331646630656533366264633639383532636466227d7d7d7d00000000000000000000`)
console.log('11111111', _a);

_ascii = '0x6074ac61ebeb53be8e6bac7377c5379f4f5333fd88da44232ba85f5a96cbbf90abef82930000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d3135343534363330343634353800000000000000000000000000000000000000';
let _utf8Str = web3.utils.hexToUtf8(_ascii)
console.log(_utf8Str,'00000000000000000')

